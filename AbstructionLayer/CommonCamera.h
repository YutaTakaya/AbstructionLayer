//==============================================================================
// Filename: CommonCamera.h
// Description: 抽象化レイヤー用共通カメラクラス
// Copyright (C) Silicon Studio Co.,Ltd.All rightsreserved.
//==============================================================================
#pragma once
struct FLOAT3
{
    float x, y, z;
};

class CommonCamera
{
public:
    //---------------------------------------------------------------------------
    //---------------------------------------------
    /// カメラ情報の初期設定とビュー変換行列、プロジェクション変換行列の初期化（仮想関数）
    ///
    /// \param[in] (eye)		カメラ位置
    /// \param[in] (lookat)     カメラの注視点
    /// \param[in] (up)		カメラの上方向
    ///
    /// \return エラーが出た場合-1が、正常に終了した場合0が返される
    //--------------------------------------------- 
    virtual int CameraInit(
        /*[in]*/    const FLOAT3 eye,
        /*[in]*/    const FLOAT3 lookat,
        /*[in]*/    const FLOAT3 up);

    //---------------------------------------------
    /// ビュー変換行列の更新（仮想関数）
    ///
    /// \return エラーが出た場合-1が、正常に終了した場合0が返される
    //--------------------------------------------- 
    virtual void CameraUpdate() {};

    //---------------------------------------------
    /// カメラの視点座標を変更する
    /// \param[in] (eye)    視点座標
    /// 
    /// \return void
    //--------------------------------------------- 
    void SetEye(
        /*[in]*/    const FLOAT3 eye);

    //---------------------------------------------
    /// カメラの注視点座標を変更する
    /// \param[in] (lookat)    視点座標
    /// 
    /// \return void
    //--------------------------------------------- 
    void SetLookat(
        /*[in]*/    const FLOAT3 lookat);

    //---------------------------------------------
    /// カメラの上方向ベクトルを変更する
    /// \param[in] (up)    視点座標
    /// 
    /// \return void
    //--------------------------------------------- 
    void SetUp(
        /*[in]*/    const FLOAT3 up);

    //---------------------------------------------
    /// インスタンスの取得
    /// 
    /// \return インスタンス
    //--------------------------------------------- 
    static CommonCamera& GetInstance()
    {
        return *s_pCopyInstance;
    }

    //---------------------------------------------------------------------------


protected:
    //---------------------------------------------------------------------------

    FLOAT3 m_eye = {};
    FLOAT3 m_lookat = {};
    FLOAT3 m_up = {};

    bool m_updateFlag = false;
    //---------------------------------------------------------------------------
    /// <summary>
    /// m_eye       視点座標
    /// m_lookat    注視点座標
    /// m_up        上方向ベクトル
    /// 
    /// m_updateFlag    フレーム内で変数に変更があった場合、TRUEになる
    /// </summary>
    

    //---------------------------------------------
    /// インスタンスのコピー
    /// 抽象化レイヤーにて子クラスと同じ振る舞いをさせるため
    /// 
    /// \return void
    //--------------------------------------------- 
    static void CopyInstance(CommonCamera* pInstance);

    //---------------------------------------------
    /// コピーインスタンスの削除
    /// 
    /// \return void
    //--------------------------------------------- 
    static void DeleteCopyInstance();

    //---------------------------------------------------------------------------

private:
    //---------------------------------------------------------------------------
    static inline CommonCamera* s_pCopyInstance;
    //---------------------------------------------------------------------------
    /// <summary>
    /// s_pCopyInstance 子クラスのインスタンスのコピー
    /// </summary>
};

